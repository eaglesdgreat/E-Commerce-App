swagger: '2.0'
info:
  version: 1.0.0
  title: Online Market
  description: Server Online Store Sever Api endponts and their functions 
  contact:
    name: Emmanuel
    url: github.com/eaglesdgreat
    email: okponobiemmanuel@gmail.com
  license:
    name: MIT
    url: 'http://opensource.org/licenses/MIT'
host: localhost:3080
basePath: /api
tags: 
- name: users
  description: Everything about the registered users
  externalDocs:
    description: Find out more 
    url: http://localhost:3080
schemes: 
- http
- https
paths:
  /users:
    get:
      tags: 
      - users
      summary: List of registered users
      description: To return the list of registered users stored in the database
      operationId: listUsers
      produces: 
      - application/json
      parameters:
      - in: query
        name: List
        type: array
        description: User value that need to be considered for 
        required: true
        items:
          type: string
        collectionFormat: multi
      responses:
        200:
          description: List of users
          schema:
            type: array
            items:
              $ref: '#/definitions/User'
    post:
      tags: 
      - users
      summary: Create a new user
      description: To create a new user account and save to the database
      operationId: addUser
      consumes: 
      - application/json
      produces: 
      - application/json
      parameters:
      - in: body
        name: New
        description: User object that needed to be added to the store
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        200:
          description: successful signup
        405:
          description: Invilid Input
  /users/{userId}:
    get:
      tags:
      - users
      summary: Return a user
      description: Return the data of a specific user via their ID
      operationId: getUserById
      produces:
      - application/json
      parameters:
      - name: userId
        in: path
        description: The userId that needs to be fetched. Use F193ndij23ijekakkd for testing
        type: string
        required: true
      responses:
        200:
          description: Successfull Operation
          schema:
            $ref: '#/definitions/User'
        400:
          description: Invalid ID supplied
        404:
          description: User not found
    put:
      tags:
      - users
      summary: Edit a User
      description: Edit and update a user's data on the database
      operationId: updateUser
      produces: 
      - application/json
      parameters:
      - name: userId
        in: path
        type: string
        description: ID that needed to be updated 
        required: true
      - name: body
        in: body
        description: The user object to be Updated 
        required: true
        schema:
          $ref: '#/definitions/User'
      responses:
        200:
          description: Successfully updated
        400:
          description: Invalid ID supplied
        404:
          description: User not found
    delete:
      tags:
      - users
      summary: Delete a user
      description: Delete a user account data from the database
      operationId: deleteUser
      produces:
      - application/json
      parameters:
      - name: userId
        in: path
        type: string
        description: The ID that needs to be deleted
        required: true
      responses:
        200: 
          description: Account deleted
        400:
          description: Invalid ID supplied
        404:
          description: User not found
    
definitions: 
  User:
    type: object
    properties:
      id: 
        type: object
      name: 
        type: string
      email:
        type: string
      hashed_password: 
        type: string
      salt: 
        type: string
      created: 
        type: number
      updated: 
        type: number
    xml:
      name: User